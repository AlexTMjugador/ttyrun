#!/bin/sh

# Shows how to pass arguments to this script and exits with error
showSyntaxAndExit() {
	echo "Syntax: $0 [-u user] -c command_to_run" >&2
	exit 1
}

# Read parameters from command line arguments
while getopts 'u:c:' option; do
	case $option in
		u)	objectiveUser="$OPTARG";;
		c)	commandToRun="$OPTARG";;
		*)	showSyntaxAndExit;;
	esac
done
# We need to know what command to run
if [ -z "$commandToRun" ]; then
	showSyntaxAndExit
fi

# Get logged in users, and the terminal they logged on
termUsers=$(who | cut -d' ' -f1,2)

IFS='
'
for termUser in $termUsers; do
	user=$(echo "$termUser" | cut -d' ' -f1)
	term=$(echo "$termUser" | cut -d' ' -f2)

	# Check whether it's logged in on a tty device. If that's the case,
	# maybe this is the user and tty we are looking for
	case "$term" in
		tty*)
			if [ -z "$objectiveUser" -o "$objectiveUser" = "$user" ]; then
				loggedUser="$user"
				loggedUserTerm="$term"
				break
			fi;;
	esac
done

# If we have an user and terminal to run the command on, do it
if [ -n "$loggedUser" -a -n "$loggedUserTerm" -a -c "/dev/$loggedUserTerm" ]; then
	# Code based on https://unix.stackexchange.com/a/217390
	perl -e "require 'sys/ioctl.ph'; open(tty, '>', '/dev/$loggedUserTerm'); ioctl(tty, &TIOCSTI, \$_) for split '', join ' ', @ARGV" "$commandToRun
"
	exit $?
else
	echo "Couldn't get a tty for user: $loggedUser" >&2
	exit 2
fi
